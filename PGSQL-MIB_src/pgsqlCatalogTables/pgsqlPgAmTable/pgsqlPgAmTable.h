/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id: pgsqlPgAmTable.h,v 1.1 2008/01/17 12:29:36 eggyknap Exp $
 */
#ifndef PGSQLPGAMTABLE_H
#define PGSQLPGAMTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_require(PGSQL-MIB/pgsqlPgAmTable/pgsqlPgAmTable_interface);
config_require(PGSQL-MIB/pgsqlPgAmTable/pgsqlPgAmTable_data_access);
config_require(PGSQL-MIB/pgsqlPgAmTable/pgsqlPgAmTable_data_get);
config_require(PGSQL-MIB/pgsqlPgAmTable/pgsqlPgAmTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for  */
#include "pgsqlPgAmTable_oids.h"

/* enum definions */
#include "pgsqlPgAmTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_pgsqlPgAmTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table pgsqlPgAmTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * pgsqlPgAmTable is subid 2 of pgsqlCatalogTables.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.27645.1.2.2, length: 10
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review pgsqlPgAmTable registration context.
     */
typedef netsnmp_data_list * pgsqlPgAmTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review pgsqlPgAmTable data context structure.
 * This structure is used to represent the data for pgsqlPgAmTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * pgsqlPgAmTable.
 */
typedef struct pgsqlPgAmTable_data_s {

        /*
         * pgsqlPgAmAmname(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   pgsqlPgAmAmname[255];
size_t      pgsqlPgAmAmname_len; /* # of char elements, not bytes */

        /*
         * pgsqlPgAmAmstrategies(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmstrategies;

        /*
         * pgsqlPgAmAmsupport(4)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmsupport;

        /*
         * pgsqlPgAmAmorderstrategy(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmorderstrategy;

        /*
         * pgsqlPgAmAmcanunique(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmcanunique;

        /*
         * pgsqlPgAmAmcanmulticol(7)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmcanmulticol;

        /*
         * pgsqlPgAmAmoptionalkey(8)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmoptionalkey;

        /*
         * pgsqlPgAmAmindexnulls(9)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmindexnulls;

        /*
         * pgsqlPgAmAmstorage(10)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmstorage;

        /*
         * pgsqlPgAmAmclusterable(11)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   pgsqlPgAmAmclusterable;

        /*
         * pgsqlPgAmAminsert(12)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAminsert;

        /*
         * pgsqlPgAmAmbeginscan(13)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmbeginscan;

        /*
         * pgsqlPgAmAmgettuple(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmgettuple;

        /*
         * pgsqlPgAmAmgetmulti(15)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmgetmulti;

        /*
         * pgsqlPgAmAmrescan(16)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmrescan;

        /*
         * pgsqlPgAmAmendscan(17)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmendscan;

        /*
         * pgsqlPgAmAmmarkpos(18)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmmarkpos;

        /*
         * pgsqlPgAmAmrestrpos(19)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmrestrpos;

        /*
         * pgsqlPgAmAmbuild(20)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmbuild;

        /*
         * pgsqlPgAmAmbulkdelete(21)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmbulkdelete;

        /*
         * pgsqlPgAmAmvacuumcleanup(22)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmvacuumcleanup;

        /*
         * pgsqlPgAmAmcostestimate(23)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmcostestimate;

        /*
         * pgsqlPgAmAmoptions(24)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   pgsqlPgAmAmoptions;

} pgsqlPgAmTable_data;


/*
 * TODO:120:r: |-> Review pgsqlPgAmTable mib index.
 * This structure is used to represent the index for pgsqlPgAmTable.
 */
typedef struct pgsqlPgAmTable_mib_index_s {

        /*
         * pgsnmpdConnID(1)/DisplayString/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/H
         */
        /** 128 - 2(other indexes) - oid length(12) = 113 */
   char   pgsnmpdConnID[113];
   size_t      pgsnmpdConnID_len;

        /*
         * rdbmsDbIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
   long   rdbmsDbIndex;

        /*
         * pgsqlPgAmEntryOID(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/r/d/h
         */
   long   pgsqlPgAmEntryOID;


} pgsqlPgAmTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review pgsqlPgAmTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(10)
*/
#define MAX_pgsqlPgAmTable_IDX_LEN     116


/* *********************************************************************
 * TODO:130:o: |-> Review pgsqlPgAmTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * pgsqlPgAmTable_rowreq_ctx pointer.
 */
typedef struct pgsqlPgAmTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_pgsqlPgAmTable_IDX_LEN];

    pgsqlPgAmTable_mib_index        tbl_idx;

    pgsqlPgAmTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    pgsqlPgAmTable_registration_ptr pgsqlPgAmTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to pgsqlPgAmTable rowreq context.
     */

    /*
     * storage for future expansion
     */
    netsnmp_data_list             *pgsqlPgAmTable_data_list;

} pgsqlPgAmTable_rowreq_ctx;

typedef struct pgsqlPgAmTable_ref_rowreq_ctx_s {
    pgsqlPgAmTable_rowreq_ctx *rowreq_ctx;
} pgsqlPgAmTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int pgsqlPgAmTable_pre_request(pgsqlPgAmTable_registration_ptr user_context);
    int pgsqlPgAmTable_post_request(pgsqlPgAmTable_registration_ptr user_context);


extern oid pgsqlPgAmTable_oid[];
extern int pgsqlPgAmTable_oid_size;


#include "pgsqlPgAmTable_interface.h"
#include "pgsqlPgAmTable_data_access.h"
#include "pgsqlPgAmTable_data_get.h"
#include "pgsqlPgAmTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* PGSQLPGAMTABLE_H */
